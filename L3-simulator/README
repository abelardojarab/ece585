~~~~~~~~~~~~~~~~~~~~~~~~~~ Part 1: original.c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Our C program was tested by running a text file containing lines of the type
  'n address'
where
  'n' could be 0-9 and indicated the desired operation type and
  'address' was some 32-bit address.

Our demo program was successful for all tests except ensuring cache coherency.

The final file submitted to the professor and used for the project demo can be
found in base.c in this repo.

~~~~~~~~~~~~~~~~~~~~~~~~~~ Part 2: extensibility ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Code quality should be improved. Our prof challenged me to improve extensibility so that it would
take less than fifteen minutes to change the size (number of lines) or set
associativity (direct-mapped, fully associative).

The original file (original.c) had 646 lines, used while loops, assumed a four-way cache and so specified 0-3 for all functions that checked all ways in an index, haphazardly included DRAM and L1 printf access notes but not in all cases and not for any functional purpose, repeated lines of code instead of just calling a function, and failed on cache coherency.

The final cache simulator still fails on cache coherency.

~~~~~~~~~~~~~~~~~~~~~~~~~ Instructions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To run this cache, you will need the following files:

main.c - contains the program itself
tesfile.din - the list of 'n' 'address' inputs
Makefile - for ease of removing and compiling files during test
run -

Download these four files into one directory and cd to that directory.

Give the script 'run' permission to do so: 'chmod u+x run'

Run the script: ./run

main.c will take in the testfile.din and printf the stats of the entire run.

It will also generate a display.txt on every iteration where n = 9. This will display everything in the cache but make no changes. The cache will be reset on every iteration where n = 8.
